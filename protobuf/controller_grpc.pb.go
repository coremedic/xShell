// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.12.4
// source: protobuf/controller.proto

package protobuf

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ControllerServiceClient is the client API for ControllerService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ControllerServiceClient interface {
	// Request C2 status
	C2Status(ctx context.Context, in *C2StatusRequest, opts ...grpc.CallOption) (*C2StatusResponse, error)
	// List all active shells
	ListShells(ctx context.Context, in *ListShellsRequest, opts ...grpc.CallOption) (*ListShellsResponse, error)
	// Request shells log data in full
	ShellLog(ctx context.Context, in *ShellLogRequest, opts ...grpc.CallOption) (*ShellLogResponse, error)
	// Stream shells log data
	StreamShellLog(ctx context.Context, in *StreamShellLogRequest, opts ...grpc.CallOption) (ControllerService_StreamShellLogClient, error)
	// Task shell to execute operation
	ExecuteOperation(ctx context.Context, in *ExecuteOperationRequest, opts ...grpc.CallOption) (*Empty, error)
	// Generate new client
	NewClient(ctx context.Context, in *NewClientRequest, opts ...grpc.CallOption) (*NewClientResponse, error)
	// Generate new payload
	NewPayload(ctx context.Context, in *NewPayloadRequest, opts ...grpc.CallOption) (*NewPayloadResponse, error)
}

type controllerServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewControllerServiceClient(cc grpc.ClientConnInterface) ControllerServiceClient {
	return &controllerServiceClient{cc}
}

func (c *controllerServiceClient) C2Status(ctx context.Context, in *C2StatusRequest, opts ...grpc.CallOption) (*C2StatusResponse, error) {
	out := new(C2StatusResponse)
	err := c.cc.Invoke(ctx, "/protobuf.ControllerService/C2Status", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *controllerServiceClient) ListShells(ctx context.Context, in *ListShellsRequest, opts ...grpc.CallOption) (*ListShellsResponse, error) {
	out := new(ListShellsResponse)
	err := c.cc.Invoke(ctx, "/protobuf.ControllerService/ListShells", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *controllerServiceClient) ShellLog(ctx context.Context, in *ShellLogRequest, opts ...grpc.CallOption) (*ShellLogResponse, error) {
	out := new(ShellLogResponse)
	err := c.cc.Invoke(ctx, "/protobuf.ControllerService/ShellLog", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *controllerServiceClient) StreamShellLog(ctx context.Context, in *StreamShellLogRequest, opts ...grpc.CallOption) (ControllerService_StreamShellLogClient, error) {
	stream, err := c.cc.NewStream(ctx, &ControllerService_ServiceDesc.Streams[0], "/protobuf.ControllerService/StreamShellLog", opts...)
	if err != nil {
		return nil, err
	}
	x := &controllerServiceStreamShellLogClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ControllerService_StreamShellLogClient interface {
	Recv() (*StreamShellLogResposne, error)
	grpc.ClientStream
}

type controllerServiceStreamShellLogClient struct {
	grpc.ClientStream
}

func (x *controllerServiceStreamShellLogClient) Recv() (*StreamShellLogResposne, error) {
	m := new(StreamShellLogResposne)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *controllerServiceClient) ExecuteOperation(ctx context.Context, in *ExecuteOperationRequest, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/protobuf.ControllerService/ExecuteOperation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *controllerServiceClient) NewClient(ctx context.Context, in *NewClientRequest, opts ...grpc.CallOption) (*NewClientResponse, error) {
	out := new(NewClientResponse)
	err := c.cc.Invoke(ctx, "/protobuf.ControllerService/NewClient", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *controllerServiceClient) NewPayload(ctx context.Context, in *NewPayloadRequest, opts ...grpc.CallOption) (*NewPayloadResponse, error) {
	out := new(NewPayloadResponse)
	err := c.cc.Invoke(ctx, "/protobuf.ControllerService/NewPayload", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ControllerServiceServer is the server API for ControllerService service.
// All implementations must embed UnimplementedControllerServiceServer
// for forward compatibility
type ControllerServiceServer interface {
	// Request C2 status
	C2Status(context.Context, *C2StatusRequest) (*C2StatusResponse, error)
	// List all active shells
	ListShells(context.Context, *ListShellsRequest) (*ListShellsResponse, error)
	// Request shells log data in full
	ShellLog(context.Context, *ShellLogRequest) (*ShellLogResponse, error)
	// Stream shells log data
	StreamShellLog(*StreamShellLogRequest, ControllerService_StreamShellLogServer) error
	// Task shell to execute operation
	ExecuteOperation(context.Context, *ExecuteOperationRequest) (*Empty, error)
	// Generate new client
	NewClient(context.Context, *NewClientRequest) (*NewClientResponse, error)
	// Generate new payload
	NewPayload(context.Context, *NewPayloadRequest) (*NewPayloadResponse, error)
	mustEmbedUnimplementedControllerServiceServer()
}

// UnimplementedControllerServiceServer must be embedded to have forward compatible implementations.
type UnimplementedControllerServiceServer struct {
}

func (UnimplementedControllerServiceServer) C2Status(context.Context, *C2StatusRequest) (*C2StatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method C2Status not implemented")
}
func (UnimplementedControllerServiceServer) ListShells(context.Context, *ListShellsRequest) (*ListShellsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListShells not implemented")
}
func (UnimplementedControllerServiceServer) ShellLog(context.Context, *ShellLogRequest) (*ShellLogResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ShellLog not implemented")
}
func (UnimplementedControllerServiceServer) StreamShellLog(*StreamShellLogRequest, ControllerService_StreamShellLogServer) error {
	return status.Errorf(codes.Unimplemented, "method StreamShellLog not implemented")
}
func (UnimplementedControllerServiceServer) ExecuteOperation(context.Context, *ExecuteOperationRequest) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExecuteOperation not implemented")
}
func (UnimplementedControllerServiceServer) NewClient(context.Context, *NewClientRequest) (*NewClientResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NewClient not implemented")
}
func (UnimplementedControllerServiceServer) NewPayload(context.Context, *NewPayloadRequest) (*NewPayloadResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NewPayload not implemented")
}
func (UnimplementedControllerServiceServer) mustEmbedUnimplementedControllerServiceServer() {}

// UnsafeControllerServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ControllerServiceServer will
// result in compilation errors.
type UnsafeControllerServiceServer interface {
	mustEmbedUnimplementedControllerServiceServer()
}

func RegisterControllerServiceServer(s grpc.ServiceRegistrar, srv ControllerServiceServer) {
	s.RegisterService(&ControllerService_ServiceDesc, srv)
}

func _ControllerService_C2Status_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(C2StatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ControllerServiceServer).C2Status(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protobuf.ControllerService/C2Status",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ControllerServiceServer).C2Status(ctx, req.(*C2StatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ControllerService_ListShells_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListShellsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ControllerServiceServer).ListShells(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protobuf.ControllerService/ListShells",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ControllerServiceServer).ListShells(ctx, req.(*ListShellsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ControllerService_ShellLog_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ShellLogRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ControllerServiceServer).ShellLog(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protobuf.ControllerService/ShellLog",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ControllerServiceServer).ShellLog(ctx, req.(*ShellLogRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ControllerService_StreamShellLog_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(StreamShellLogRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ControllerServiceServer).StreamShellLog(m, &controllerServiceStreamShellLogServer{stream})
}

type ControllerService_StreamShellLogServer interface {
	Send(*StreamShellLogResposne) error
	grpc.ServerStream
}

type controllerServiceStreamShellLogServer struct {
	grpc.ServerStream
}

func (x *controllerServiceStreamShellLogServer) Send(m *StreamShellLogResposne) error {
	return x.ServerStream.SendMsg(m)
}

func _ControllerService_ExecuteOperation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExecuteOperationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ControllerServiceServer).ExecuteOperation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protobuf.ControllerService/ExecuteOperation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ControllerServiceServer).ExecuteOperation(ctx, req.(*ExecuteOperationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ControllerService_NewClient_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NewClientRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ControllerServiceServer).NewClient(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protobuf.ControllerService/NewClient",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ControllerServiceServer).NewClient(ctx, req.(*NewClientRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ControllerService_NewPayload_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NewPayloadRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ControllerServiceServer).NewPayload(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protobuf.ControllerService/NewPayload",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ControllerServiceServer).NewPayload(ctx, req.(*NewPayloadRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ControllerService_ServiceDesc is the grpc.ServiceDesc for ControllerService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ControllerService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "protobuf.ControllerService",
	HandlerType: (*ControllerServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "C2Status",
			Handler:    _ControllerService_C2Status_Handler,
		},
		{
			MethodName: "ListShells",
			Handler:    _ControllerService_ListShells_Handler,
		},
		{
			MethodName: "ShellLog",
			Handler:    _ControllerService_ShellLog_Handler,
		},
		{
			MethodName: "ExecuteOperation",
			Handler:    _ControllerService_ExecuteOperation_Handler,
		},
		{
			MethodName: "NewClient",
			Handler:    _ControllerService_NewClient_Handler,
		},
		{
			MethodName: "NewPayload",
			Handler:    _ControllerService_NewPayload_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StreamShellLog",
			Handler:       _ControllerService_StreamShellLog_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "protobuf/controller.proto",
}
